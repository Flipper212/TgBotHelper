import telebot
import config
from telebot import types
from random import randint
import lesson


bot = telebot.TeleBot(config.TOKEN)
print(111111, lesson.result)


@bot.message_handler(commands=["start"])
def welcome(message):
    sti_hi = open("add/hi.webp", "rb")
    bot.send_sticker(message.chat.id, sti_hi)

    # keyboard
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    key1 = types.KeyboardButton("üé≤–†–∞–Ω–¥–æ–º –≤—ñ–¥ 1 –¥–æ 100")
    key2 = types.KeyboardButton("ü•∞–Ø–∫ —Å–ø—Ä–∞–≤–∏")
    key3 = types.KeyboardButton("üòè–ì–î–ó")
    key4 = types.KeyboardButton("üìÑ–†–æ–∑–∫–ª–∞–¥")
    key5 = types.KeyboardButton("‚ô¶BETA:–î–æ –∫—ñ–Ω—Ü—è —É—Ä–æ–∫—É")
    markup.add(key1, key2, key3, key4, key5)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç {0.first_name}!\n–Ø <b>{1.first_name}</b> –±–æ—Ç —è–∫–∏–π –±—É–¥–µ —Ç–æ–±—ñ –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏,–µ–π –±–æ—Ç –±—É–¥–µ –¥–æ—Ä–æ–±–ª—è—Ç–∏—Å—è —ñ–∑ —á–∞—Å–æ–º. \nGithub: Flipper212".format(
        message.from_user, bot.get_me()), parse_mode="html", reply_markup=markup)


@bot.message_handler(content_types = ["text"])
def user_write(message):
    if message.chat.type == "private":
        if message.text == "üìÑ–†–æ–∑–∫–ª–∞–¥":
            with open("add/lessons.webp", "rb") as sti:
                bot.send_photo(message.chat.id, sti)
        elif message.text == "‚ô¶BETA:–î–æ –∫—ñ–Ω—Ü—è —É—Ä–æ–∫—É":
            if lesson.main()[-1] is False:
                bot.send_message(message.chat.id, "<b>–°—å–æ–≥–æ–¥–Ω—ñ –Ω–µ –º–∞—î —É—Ä–æ–∫—ñ–≤</b>ü•∞", parse_mode="html")
            elif lesson.main()[0] > 40:
                bot.send_message(message.chat.id,
                                 f"<b>{lesson.main()[1]}</b> –ø–æ—á–Ω–µ—Ç—å—Å—è —á–µ—Ä–µ–∑ <b>{40 - lesson.main()[0]}</b> —Ö–≤ ",
                                 parse_mode="html")
            elif lesson.main()[2]:
                bot.send_message(message.chat.id, f"–£—Ä–æ–∫ –∑–∞–∫—ñ–Ω—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ <b>{lesson.main()[0]}</b> —Ö–≤, –Ω–∞—Å—Ç—É–ø–Ω–∏–π <b>{lesson.main()[1]}</b>", parse_mode="html")
            elif lesson.main()[3]:
                bot.send_message(message.chat.id, "<b>–£—Ä–æ–∫–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å</b>ü•∞", parse_mode="html")
        elif message.text == "üé≤–†–∞–Ω–¥–æ–º –≤—ñ–¥ 1 –¥–æ 100":
            bot.send_message(message.chat.id, str(randint(1, 100)))
        elif message.text == "ü•∞–Ø–∫ —Å–ø—Ä–∞–≤–∏":
            #InlineButton
            markup = types.InlineKeyboardMarkup(row_width=2)
            key1 = types.InlineKeyboardButton("–í—Å–µ –¥–æ–±—Ä–µ", callback_data="good")
            key2 = types.InlineKeyboardButton("–ù–µ –¥—É–∂–µ", callback_data="bad")
            markup.add(key1, key2)

            bot.send_message(message.chat.id, "–ß—É–¥–æ–≤–æ, —Ç–∏ —è–∫?", reply_markup=markup)
        elif message.text == "üòè–ì–î–ó":
            markup = types.InlineKeyboardMarkup(row_width=2)
            key1 = types.InlineKeyboardButton("–ê–ª–≥–µ–±—Ä–∞", callback_data="alg", url="https://vshkole.com/9-klass/reshebniki/algebra/ag-merzlyak-vb-polonskij-ms-yakir-2017-pogliblene-vivchennya")
            key2 = types.InlineKeyboardButton("–ì–µ–æ–º–µ—Ç—Ä—ñ—è", callback_data="geom", url="https://vshkole.com/9-klass/reshebniki/geometriya/ag-merzlyak-vb-polonskij-ms-yakir-2017-pogliblene-vivchennya")
            key3 = types.InlineKeyboardButton("–•—ñ–º—ñ—è", callback_data="xim", url="https://vshkole.com/9-klass/reshebniki/himiya/ov-grigorovich-2017")
            key4 = types.InlineKeyboardButton("–ë—ñ–æ–ª–æ–≥—ñ—è", callback_data="bio", url="http://8next.com/9b_obp_u2017.html")
            key5 = types.InlineKeyboardButton("–£–∫—Ä –º–æ–≤–∞", callback_data="ukr_lan", url="https://4book.org/gdz-reshebniki-ukraina/9-klas/gdz-vidpovidi-ukrayinska-mova-9-klas-zabolotniy-2017")
            key6 = types.InlineKeyboardButton("–≥–µ–æ–≥—Ä–∞—Ñ—ñ—è(–ø—Ä–∞–∫—Ç–∏–∫—É–º)", callback_data="geog", url="https://gdzonline.net/753-pugach-9-klas.html")
            markup.add(key1, key2, key3, key4, key5, key6)

            bot.send_message(message.chat.id, "üôà–í–∏–±–∏—Ä–∞–π:", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "üòì—è –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤ –∫–æ–º–∞–Ω–¥—É")

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == "good":
                bot.send_message(call.message.chat.id, "–¶–µ –¥–æ–±—Ä–µüòã")
            elif call.data == "bad":
                bot.send_message(call.message.chat.id, "–¶–µ –ø–æ–≥–∞–Ω–æüòî")

            #remove inline button
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text="ü•∞ –Ø–∫ —Å–ø—Ä–∞–≤–∏", reply_markup=None)

            #show alert
            bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–î—è–∫—É—é –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—èüòä")
    except Exception as error:
        print(repr(error))

bot.polling(none_stop=True)